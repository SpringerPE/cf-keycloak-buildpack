#!/usr/bin/env bash
set -euo pipefail
# https://docs.cloudfoundry.org/buildpacks/understand-buildpacks.html

# Environment variables which are provided by the CF platform
BUILD_DIR="${1}"
CACHE_DIR="${2}"
DEPS_DIR="${3}"
DEPS_IDX="${4}"

BUILDPACK_DIR=$(dirname $(readlink -f ${BASH_SOURCE%/*}))
# Set custom environment variables, configured in parameters.sh
source ${BUILDPACK_DIR}/parameters.sh

# The Keycloak version can be overridden by specifying the version number in runtime.txt
# You can add comments to the runtime.txt when the line starts with `#`
# TODO: Remove this part, as we can override this with an env var in the CF manifest
if [ -f "${BUILD_DIR}/runtime.txt" ]
then
    KEYCLOAK_VERSION=$((grep -v '^#' "${BUILD_DIR}/runtime.txt" || true) | head -n1)
    if [ -z "${KEYCLOAK_VERSION}" ]
    then
        >&2 echo "ERROR ($LINENO)> runtime.txt found but no version specified!"
        exit 1
    fi
fi

####################
# Download section #
####################

# Generic function for checking availability of the download in Artifactory
# If its not in Artifactory, download it from the upstream source
check_and_download () {
   DOWNLOAD_NAME="${1}"     # To identify the download. E.g. 'keycloak' or 'openjdk'.
   DOWNLOAD_VERSION="${2}"  # Version of the download used in the path and name construction.
   ORGANISATION_ROOT="${3}" # Root path to store the artifact under in Artifactory, e.g. 'net/java'.
   TARGET_FILE="${4}"       # The artifact file name.
   DOWNLOAD_URL="${5}"      # The upstream (source) download url.

   FULL_ARTIFACTORY_REPO_PATH="${ORGANISATION_ROOT}/${DOWNLOAD_NAME}/${DOWNLOAD_VERSION}/"
   FULL_ARTIFACTORY_URL="https://${ARTIFACTORY_URL}/springernature/identity-buildpack-local/"

   if curl -s -u "${ARTIFACTORY_USERNAME}":"${ARTIFACTORY_PASSWORD}" --head --fail "${FULL_ARTIFACTORY_URL}${FULL_ARTIFACTORY_REPO_PATH}${TARGET_FILE}" -o /dev/null
   then
       echo "--> ${DOWNLOAD_NAME} already available in Artifactory"
   else
       echo "--> Downloading ${DOWNLOAD_NAME}: ${DOWNLOAD_URL}"
       if curl -s --fail "${DOWNLOAD_URL}" -o "/tmp/${TARGET_FILE}"
       then
           UPLOAD_URL="${FULL_ARTIFACTORY_URL}${FULL_ARTIFACTORY_REPO_PATH}${TARGET_FILE}"
           echo "--> Upload ${DOWNLOAD_NAME} to ${UPLOAD_URL}"
           if curl -u "${ARTIFACTORY_USERNAME}":"${ARTIFACTORY_PASSWORD}" -T "/tmp/${TARGET_FILE}" "${FULL_ARTIFACTORY_URL}${FULL_ARTIFACTORY_REPO_PATH}${TARGET_FILE}"
           then
               echo "--> ${DOWNLOAD_NAME} uploaded to Artifactory"
           else
               >&2 echo "ERROR ($LINENO)> Failed to upload ${DOWNLOAD_NAME} to Artifactory"
               exit 1
           fi
       else
           >&2 echo "ERROR ($LINENO)> Download for ${DOWNLOAD_NAME} not found, URL=${DOWNLOAD_URL}"
           exit 1
       fi
   fi
}

# Generic download function
# All downloads are stored in a temporary location, which is the 'CACHE_DIR'.
download () {
    DOWNLOAD_NAME="${1}"  # To identify the download. E.g. 'keycloak' or 'mysql driver'
    TARGET_FILE="${2}"    # How the download gets stored locally.
    DOWNLOAD_URL="${3}"   # This is what will be downloaded

    if [ -f "${CACHE_DIR}/${TARGET_FILE}" ]
    then
        echo "-----> Using ${TARGET_FILE} from cache"
    else
        echo "-----> Downloading ${DOWNLOAD_NAME}: ${DOWNLOAD_URL}"
        if ! wget -nv "${DOWNLOAD_URL}" --http-user "${ARTIFACTORY_USERNAME}" --http-password "${ARTIFACTORY_PASSWORD}" -O "${CACHE_DIR}/${TARGET_FILE}" 2>&1 | sed 's/^/       /'
        then
            >&2 echo "ERROR ($LINENO)> Download for ${DOWNLOAD_NAME} not found, URL=${DOWNLOAD_URL}"
            exit 1
        fi
    fi
}


# This is where all required software is downloaded.
if [[ -z "${ARTIFACTORY_URL}" || -z "${ARTIFACTORY_USERNAME}" || -z "${ARTIFACTORY_PASSWORD}" || -z "${KEYCLOAK_VERSION}" || -z "${OPENJDK_VERSION}" ]]
then
   >&2 echo "ERROR ($LINENO)> One of the required environment variables is not set or empty valued:"
   echo -e "ARTIFACTORY_URL\nARTIFACTORY_USERNAME\nARTIFACTORY_PASSWORD\nKEYCLOAK_VERSION\nOPENJDK_VERSION"
   exit 1
else
   echo "> Download Keycloak"
   KEYCLOAK_DOWNLOAD_URL="https://downloads.jboss.org/keycloak/${KEYCLOAK_VERSION}/keycloak-${KEYCLOAK_VERSION}.tar.gz"
   check_and_download "keycloak" "${KEYCLOAK_VERSION}" "org" "keycloak-${KEYCLOAK_VERSION}.tar.gz" "${KEYCLOAK_DOWNLOAD_URL}"
   echo "> Download OpenJDK"
   JDK_DOWNLOAD_URL="https://download.java.net/openjdk/jdk11/ri/openjdk-${OPENJDK_VERSION}_linux-x64_bin.tar.gz"
   check_and_download "openjdk" "${OPENJDK_VERSION}" "net/java" "openjdk-${OPENJDK_VERSION}_linux-x64_bin.tar.gz" "${JDK_DOWNLOAD_URL}"
fi

if [[ ! -v JDBC_POSTGRES_VERSION && ! -v JDBC_MYSQL_VERSION ]]
then
  >&2 echo "ERROR ($LINENO)> You must specify one of 'JDBC_POSTGRES_VERSION' or 'JDBC_MYSQL_VERSION'."
  exit 1
fi

KEYCLOAK_DOWNLOAD_URL="https://${ARTIFACTORY_URL}/springernature/identity-buildpack-local/org/keycloak/${KEYCLOAK_VERSION}/keycloak-${KEYCLOAK_VERSION}.tar.gz"
download "keycloak" "keycloak-${KEYCLOAK_VERSION}.tar.gz" "${KEYCLOAK_DOWNLOAD_URL}"

# NOT using the Java buldpack because, A) We want to control the Java version to keep it the same as that specified in
# the Keycloak Docker image and B) because if you use the Java buildpack it has to be the last one in the buildpack
# 'chain' and that would stop us from having Keycloak as the last buildpack, which would stop us from running Keycloak.
JDK_DOWNLOAD_URL="https://${ARTIFACTORY_URL}/springernature/identity-buildpack-local/net/java/openjdk/${OPENJDK_VERSION}/openjdk-${OPENJDK_VERSION}_linux-x64_bin.tar.gz"
download "openjdk" "openjdk-${OPENJDK_VERSION}.tar.gz" "${JDK_DOWNLOAD_URL}"

if [[ -v JDBC_POSTGRES_VERSION ]]
then
  POSTGRES_DRIVER_DOWNLOAD_URL="https://${ARTIFACTORY_URL}/springernature/jcenter/org/postgresql/postgresql/$JDBC_POSTGRES_VERSION/postgresql-$JDBC_POSTGRES_VERSION.jar"
  download "postgres driver" "postgres-jdbc.jar" "${POSTGRES_DRIVER_DOWNLOAD_URL}"
fi

if [[ -v JDBC_MYSQL_VERSION ]]
then
  MYSQL_DRIVER_DOWNLOAD_URL="https://${ARTIFACTORY_URL}/springernature/jcenter/mysql/mysql-connector-java/$JDBC_MYSQL_VERSION/mysql-connector-java-$JDBC_MYSQL_VERSION.jar"
  download "mysql driver" "mysql-connector-java.jar" "${MYSQL_DRIVER_DOWNLOAD_URL}"
fi

